import re  # 正则表达式，进行文字匹配
from bs4 import BeautifulSoup  # 网页解析，获取数据
import urllib  # 制定URL，获取网页数据
import xlwt  # 进行excel操作
import sqlite3  # 进行SQLite数据库操作
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import urllib.request

def main():
    baseurl = "https://movie.douban.com/top250?start="
    #爬取网页
    datalist = getData(baseurl)
    savepath = "豆瓣top250.xls"
    #保存路径
    saveData(datalist,savepath)
    #askURL("https://movie.douban.com/top250?start=")


#影片详情链接的规则
findlink = re.compile(r'<a href="(.*?)">')      #创建正则表达式对象，表示规则（字符串的模式）
#影片的图片
findImgSrc = re.compile(r'<img.*src="(.*?)"',re.S)      #re.S让换行符包含在字符中
#影片的篇名
findTitle = re.compile(r'<span class="title">(.*)</span>')
#影片的评分
findRating = re.compile(r'<span class="rating_num" property="v:average">(.*)</span>')
#评价人数
findJudge = re.compile(r'<span>(\d*)人评价</span>')
#找到概况
findInq = re.compile(r'<span class="inq">(.*)</span>')
#影片的相关内容
findBd = re.compile(r'<p class="">(.*?)</p>',re.S)





def askURL(url):
    head = {            #模拟浏览器头部信息，想豆瓣服务器发送消息
        "User-Agent": "xxxxx"
    }

    request = urllib.request.Request(url,headers=head)
    html = ""
    try:
        response = urllib.request.urlopen(request)
        html = response.read().decode("utf-8")
        #print(html)
    except urllib.error.URLError as e:
        if hasattr(e,"code"):
            print(e.code)
        if hasattr(e,"reason"):
            print(e.reason)
    return html

# 爬取网页
def getData(baseurl):
    datalist = []
    for i in range(0, 10):                            #调用获取网页信息的函数10次
        url = baseurl + str(i*25)
        html = askURL(url)                          #保存获取到的网页源码
    # 逐一解析数据
        soup = BeautifulSoup(html, "html.parser")
        for item in soup.find_all('div', class_="item"):            #查找符合要求的字符串，形成列表
            #print(item)        #这是一个测试，查看电影的item全部信息
            data = []       #保存一部电影的所有信息
            item = str(item)

            #获取电影链接地址
            link = re.findall(findlink,item)[0]        #re库用来通过正则表达式查找指定的字符串
            data.append(link)                          #添加链接

            imgSrc = re.findall(findImgSrc,item)[0]
            data.append(imgSrc)                        #添加图片

            title = re.findall(findTitle,item)         #片名可能为一个中文名，没有外国名
            if(len(title) == 2):
                ctitle = title[0]                      #添加中文名
                data.append(ctitle)
                otitle = title[1].replace("/","")      #去掉无关字符
                data.append(otitle)                    #添加外国名
            else:
                data.append(title[0])
                data.append(' ')                       #外国名字留空，因为最后输入execle表格

            rating = re.findall(findRating,item)[0]    #添加评分
            data.append(rating)

            judgeNum = re.findall(findJudge,item)[0]   #添加评价人数
            data.append(judgeNum)

            inq = re.findall(findInq,item)             #添加概述
            if len(inq) != 0:
                inq = inq[0].replace("。","")           #去掉句号
                data.append(inq)                       #添加概述
            else:
                data.append(" ")                       #留空

            bd = re.findall(findBd,item)[0]
            bd = re.sub('<br(\s+)?/>(\s+)?'," ",bd)    #去掉<br/>
            bd = re.sub("/"," ",bd)                    #去掉/
            data.append(bd.strip())                    #去掉空格

            datalist.append(data)                      #处理好的一部电影信息放入datalist
        #print(datalist)
    return datalist


# 保存数据
def saveData(datalist,savepath):
    print("save....")
    book = xlwt.Workbook(encoding="utf-8",style_compression=0)  # 创建workbook对象
    sheet = book.add_sheet("豆瓣电影Top250",cell_overwrite_ok=True)  # 创建工作表
    col =  ("电影详情链接","图片链接","影片中文名","影片外国名","评分","评价数","概况","相关信息")
    for i in range(0,8):
        sheet.write(0,i,col[i])    #写列名
    for i in range(0,250):
        print("第%d条" %(i+1))
        data = datalist[i]
        for j in range(0,8):
            sheet.write(i+1,j,data[j])      #数据

    book.save(savepath)            #保存


if __name__ == "__main__":  # 当程序执行时
    main()              # 调用函数
    print("爬取完毕！")
